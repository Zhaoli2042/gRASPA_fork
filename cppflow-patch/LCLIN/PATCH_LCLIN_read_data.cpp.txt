PATCH_LCLIN_READDATA
void ReadLCLinModelParameters(Components& SystemComponents)
{
  std::vector<std::string> termsScannedLined{};
  std::string str;
  std::ifstream file("simulation.input");
  while (std::getline(file, str))
  {
    if (FOUND(str, "DNNModelName"))
    {
      termsScannedLined = split(str, ' ');
      SystemComponents.ModelName.push_back(termsScannedLined[1]);
    }
    if (FOUND(str, "DNNInputLayer"))
    {
      termsScannedLined = split(str, ' ');
      SystemComponents.InputLayer.push_back(termsScannedLined[1]);
    }
    if FOUND((str, "MaxDNNDrift"))
    {
      termsScannedLined = split(str, ' ');
      SystemComponents.DNNDrift = std::stod(termsScannedLined[1]);
    }
  }
  printf("DNN Model Name: %s, DNN Input Layer: %s\n", SystemComponents.ModelName[0].c_str(), SystemComponents.InputLayer[0].c_str());
}
//Function related to Read DNN Model//
std::vector<double2> ReadMinMax()
{
  std::vector<double2> MinMax;
  std::vector<std::string> termsScannedLined{};
  std::string str;
  std::ifstream file("minimax.txt");
  while (std::getline(file, str))
  {
    termsScannedLined = split(str, ' ');
    //printf("%s\n", str.c_str());
    double min = std::stod(termsScannedLined[0]);
    double max = std::stod(termsScannedLined[1]);
    MinMax.push_back({min, max});
  }
  //printf("MinMax size: %zu\n", MinMax.size());
  return MinMax;
}
